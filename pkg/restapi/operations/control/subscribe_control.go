// Code generated by go-swagger; DO NOT EDIT.

package control

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// SubscribeControlHandlerFunc turns a function with the right signature into a subscribe control handler
type SubscribeControlHandlerFunc func(SubscribeControlParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SubscribeControlHandlerFunc) Handle(params SubscribeControlParams) middleware.Responder {
	return fn(params)
}

// SubscribeControlHandler interface for that can handle valid subscribe control params
type SubscribeControlHandler interface {
	Handle(SubscribeControlParams) middleware.Responder
}

// NewSubscribeControl creates a new http.Handler for the subscribe control operation
func NewSubscribeControl(ctx *middleware.Context, handler SubscribeControlHandler) *SubscribeControl {
	return &SubscribeControl{Context: ctx, Handler: handler}
}

/*SubscribeControl swagger:route POST /subscriptions/control control subscribeControl

Subscribe and send "CONTROL" message to RAN to initiate or resume call processing in RAN

*/
type SubscribeControl struct {
	Context *middleware.Context
	Handler SubscribeControlHandler
}

func (o *SubscribeControl) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewSubscribeControlParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
