// Code generated by go-swagger; DO NOT EDIT.

package clientmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventTrigger event trigger
// swagger:model EventTrigger
type EventTrigger struct {

	// e n b Id
	ENBID int64 `json:"ENBId,omitempty"`

	// interface direction
	// Required: true
	InterfaceDirection *int64 `json:"InterfaceDirection"`

	// plmn Id
	PlmnID string `json:"PlmnId,omitempty"`

	// procedure code
	// Required: true
	ProcedureCode *int64 `json:"ProcedureCode"`

	// type of message
	// Required: true
	TypeOfMessage *int64 `json:"TypeOfMessage"`
}

// Validate validates this event trigger
func (m *EventTrigger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterfaceDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcedureCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTypeOfMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventTrigger) validateInterfaceDirection(formats strfmt.Registry) error {

	if err := validate.Required("InterfaceDirection", "body", m.InterfaceDirection); err != nil {
		return err
	}

	return nil
}

func (m *EventTrigger) validateProcedureCode(formats strfmt.Registry) error {

	if err := validate.Required("ProcedureCode", "body", m.ProcedureCode); err != nil {
		return err
	}

	return nil
}

func (m *EventTrigger) validateTypeOfMessage(formats strfmt.Registry) error {

	if err := validate.Required("TypeOfMessage", "body", m.TypeOfMessage); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventTrigger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventTrigger) UnmarshalBinary(b []byte) error {
	var res EventTrigger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
